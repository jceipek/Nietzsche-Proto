if (Meteor.isClient) {

  // Session Variables:
  //
  // task: keeps track of what the user is doing (searching, comparison, or looking at directions)
  //

  // Lets the templating system determine which templates to display
  Template.main.task = function (task) {
    return Session.get("task") === task;
  };

  Template.main.events({
    /* Meteor autogenerated
    'click input' : function () {
      // template data, if any, is available in 'this'
      if (typeof console !== 'undefined')
        console.log("You pressed the button");
    }
    */
  });

// START DRAWING FUNCTIONS //
  var drawRouteLine = function (ctx, xStart, xEnd, yMid, thickness, startRounded, endRounded) {
    /* For a given canvas context ctx,
     * draw a rounded route line from xStart to xEnd, centered on yMid with a given thickness.
     * Round the beginning of the line if startRounded is true.
     * Round the end of the line if endRounded is true.
    */
    ctx.beginPath();
    var radius = thickness/2;
    if (startRounded) {
      ctx.arc(xStart+radius, yMid, radius, Math.PI/2, -Math.PI/2, false);
    } else {
      ctx.moveTo(xStart, yMid+radius);
      ctx.lineTo(xStart, yMid-radius);
    }
    if (endRounded) {
      ctx.arc(xEnd-radius, yMid, radius, -Math.PI/2, Math.PI/2, false);
    } else {
      ctx.lineTo(xEnd, yMid-radius);
    }
    ctx.lineTo(xEnd, yMid+radius);
    ctx.fill();
  };

  var plotSingleRoute = function (route, yMid) {
    var canvas = $('#graphical-comparison')[0];
    if (canvas.getContext) {
      var ctx = canvas.getContext('2d');

      var scaleFactor = .4;
      var currOffset = 10;
      var steps = route.legs[0].steps;
      for (var stepIdx = 0; stepIdx < steps.length; stepIdx++) {
          if (steps[stepIdx].travel_mode === "TRANSIT") {
            ctx.fillStyle = steps[stepIdx].transit.line.color;
          } else {
            ctx.fillStyle = "rgb(0,0,0)"; 
          }
          var firstRounded = (stepIdx === 0);
          var lastRounded = (stepIdx === steps.length-1);
          var stepLength = steps[stepIdx].duration.value * scaleFactor;
          drawRouteLine(ctx, currOffset, currOffset+stepLength, yMid, 10, firstRounded, lastRounded);
          currOffset += stepLength + 10;
      }
    }
  }
// END DRAWING FUNCTIONS //

  var initializeComparisonCanvas = function () {
    var canvas = $('#graphical-comparison')[0];
    canvas.width = document.width;
    canvas.height = document.height;
    if (canvas.getContext) {
      var ctx = canvas.getContext('2d');
    } else {
      // TODO: Fallback mechanism
      console.log("canvas isn't supported");
    }
 
  };

  var findRoutes = function () {
    var router = new google.maps.DirectionsService();
    // TODO: Currently hardcoded! Make it not so.
    var request = {
      origin: "Hoboken NJ",
      destination: "Carroll Gardens, Brooklyn",
      travelMode: google.maps.TravelMode.TRANSIT,
      transitOptions: {
        departureTime: new Date()
      },
      unitSystem: google.maps.UnitSystem.IMPERIAL
    };
    router.route(request, function (response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        console.log(response);
        if (response.routes.length > 0) {
          plotSingleRoute(response.routes[0], 20);
        }
      }  
    });
  }

  // Fired whenever the DOM is ready for the routeComparison template
  Template.routeComparison.rendered = function() {
      if(!this._rendered) {
        initializeComparisonCanvas();
        findRoutes();
        this._rendered = true;
        console.log('Template onLoad');
      }
  };

  // When the application starts
  Meteor.startup(function () {
    // "task" will keep track of what the user is doing
    //Session.set("task", "route-searching"); // Choosing From and To initially
    Session.set("task", "route-comparison"); // Choosing between routes graphically
    //Session.set("task", "route-directions"); // How to use the route
  });
}
